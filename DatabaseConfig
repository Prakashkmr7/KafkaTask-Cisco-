package com.cisco.sbp.reporting.sbpreporting.configuration;

import jakarta.persistence.EntityManagerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.zaxxer.hikari.HikariDataSource;

import javax.sql.DataSource;

/**
 * Database configuration file for Data Sources , Properties, JDBC Template
 * 1. SBR Report connects to DMP, ODS
 */

@Configuration
@EnableTransactionManagement
public class DataBaseConfiguration {

	@Bean
	public DataSourceProperties getSaasDataDataSourceProps() {
		return new DataSourceProperties();
	}

	@Bean
	@ConfigurationProperties("spring.datasource.configuration.saasdata")
	public HikariDataSource getSaasDataDataSource() {
		return getSaasDataDataSourceProps().initializeDataSourceBuilder().type(HikariDataSource.class).build();
	}

	@Primary
	@Bean
	@ConfigurationProperties(prefix = "spring.datasource.svs")
	public DataSourceProperties getSvsDataSourceProps() {
		return new DataSourceProperties();
	}

	@Primary
	@Bean
	@ConfigurationProperties("spring.datasource.configuration.svs")
	public HikariDataSource getSvsDataSource() {
		return getSvsDataSourceProps().initializeDataSourceBuilder().type(HikariDataSource.class).build();
	}

	@Bean
	@ConfigurationProperties(prefix = "spring.datasource.dmp")
	public DataSourceProperties getDmpDataSourceProps() {
		return new DataSourceProperties();
	}

	@Bean
	@ConfigurationProperties("spring.datasource.configuration.dmp")
	public HikariDataSource getDmpDataSource() {
		return getDmpDataSourceProps().initializeDataSourceBuilder().type(HikariDataSource.class).build();
	@Bean(name = "saasdataNamedParameterJdbcTemplate")
	public NamedParameterJdbcTemplate getSaasDataNamedParameterJdbcTemplate() {
		return new NamedParameterJdbcTemplate(getSaasDataTemplate());
	}

	@Bean(name = "dmpNamedParameterJdbcTemplate")
	public NamedParameterJdbcTemplate getDmpNamedParameterJdbcTemplate() {
		return new NamedParameterJdbcTemplate(getDmpDataTemplate());
	}

	//JPA - Configurations
	@Bean
	@Primary
	@ConfigurationProperties(prefix = "spring.datasource.svs")
	public DataSourceProperties getSVSDataSourceProps() {
		return new DataSourceProperties();
	}

	@Bean(name = "svsDataSource")
	@Primary
	@ConfigurationProperties("spring.datasource.configuration.saasdata")
	public DataSource getSVSDataSource() {
		return getSVSDataSourceProps().initializeDataSourceBuilder().type(HikariDataSource.class).build();
	}

	@Bean(name = "entityManagerFactory")
	public LocalContainerEntityManagerFactoryBean entityManagerFactory(EntityManagerFactoryBuilder builder,
																	   @Qualifier("svsDataSource") DataSource dataSource) {
		return builder.dataSource(dataSource).packages("com.cisco.sbp.reporting.sbpreporting.model.futurebillingreport.sbpDb")
				.persistenceUnit("sbpEntityManagerFactory").build();
	}


	@Bean(name = "transactionManager")
	public PlatformTransactionManager transactionManager(
			@Qualifier("entityManagerFactory") EntityManagerFactory entityManagerFactory) {
		return new JpaTransactionManager(entityManagerFactory);
	}

}
